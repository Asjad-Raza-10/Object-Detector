{"cells":[{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2iCGbIDUFZS3","executionInfo":{"status":"ok","timestamp":1754872754318,"user_tz":-300,"elapsed":8021973,"user":{"displayName":"Syed Asjad Raza Shirazi BSCS 2024 FAST NU LHR","userId":"03694007938889218174"}},"outputId":"e4b16416-2a9f-4d9d-bf4c-464c0f458751"},"outputs":[{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["WARNING:absl:Compiled the loaded model, but the compiled metrics have yet to be built. `model.compile_metrics` will be empty until you train or evaluate the model.\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["Epoch 1/30\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py:121: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.\n","  self._warn_if_super_not_called()\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["\u001b[1m782/782\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 518ms/step - accuracy: 0.7781 - loss: 0.6614"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["\u001b[1m782/782\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m428s\u001b[0m 542ms/step - accuracy: 0.7781 - loss: 0.6614 - val_accuracy: 0.8327 - val_loss: 0.5068\n","Epoch 2/30\n","\u001b[1m782/782\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m440s\u001b[0m 540ms/step - accuracy: 0.7877 - loss: 0.6278 - val_accuracy: 0.7906 - val_loss: 0.6869\n","Epoch 3/30\n","\u001b[1m782/782\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 523ms/step - accuracy: 0.7998 - loss: 0.6024"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["\u001b[1m782/782\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m429s\u001b[0m 548ms/step - accuracy: 0.7998 - loss: 0.6024 - val_accuracy: 0.8337 - val_loss: 0.5237\n","Epoch 4/30\n","\u001b[1m782/782\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m431s\u001b[0m 551ms/step - accuracy: 0.7970 - loss: 0.6092 - val_accuracy: 0.8321 - val_loss: 0.5629\n","Epoch 5/30\n","\u001b[1m782/782\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m442s\u001b[0m 550ms/step - accuracy: 0.7990 - loss: 0.5960 - val_accuracy: 0.8149 - val_loss: 0.5839\n","Epoch 6/30\n","\u001b[1m782/782\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m430s\u001b[0m 550ms/step - accuracy: 0.8025 - loss: 0.5938 - val_accuracy: 0.8150 - val_loss: 0.5869\n","Epoch 7/30\n","\u001b[1m782/782\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 524ms/step - accuracy: 0.8054 - loss: 0.5802"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["\u001b[1m782/782\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m431s\u001b[0m 552ms/step - accuracy: 0.8054 - loss: 0.5802 - val_accuracy: 0.8339 - val_loss: 0.5078\n","Epoch 8/30\n","\u001b[1m782/782\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 524ms/step - accuracy: 0.8060 - loss: 0.5786"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m782/782\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m429s\u001b[0m 548ms/step - accuracy: 0.8060 - loss: 0.5786 - val_accuracy: 0.8469 - val_loss: 0.4761\n","Epoch 9/30\n","\u001b[1m782/782\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m432s\u001b[0m 552ms/step - accuracy: 0.8104 - loss: 0.5699 - val_accuracy: 0.8256 - val_loss: 0.5708\n","Epoch 10/30\n","\u001b[1m782/782\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m430s\u001b[0m 549ms/step - accuracy: 0.8099 - loss: 0.5708 - val_accuracy: 0.8418 - val_loss: 0.4927\n","Epoch 11/30\n","\u001b[1m782/782\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m427s\u001b[0m 546ms/step - accuracy: 0.8064 - loss: 0.5808 - val_accuracy: 0.8297 - val_loss: 0.5428\n","Epoch 12/30\n","\u001b[1m782/782\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m444s\u001b[0m 549ms/step - accuracy: 0.8087 - loss: 0.5744 - val_accuracy: 0.8309 - val_loss: 0.5344\n","Epoch 13/30\n","\u001b[1m782/782\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m427s\u001b[0m 546ms/step - accuracy: 0.8087 - loss: 0.5732 - val_accuracy: 0.8377 - val_loss: 0.5244\n","Epoch 14/30\n","\u001b[1m782/782\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m430s\u001b[0m 550ms/step - accuracy: 0.8141 - loss: 0.5630 - val_accuracy: 0.8274 - val_loss: 0.5262\n","Epoch 15/30\n","\u001b[1m782/782\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m429s\u001b[0m 548ms/step - accuracy: 0.8111 - loss: 0.5635 - val_accuracy: 0.8467 - val_loss: 0.5208\n","Epoch 16/30\n","\u001b[1m782/782\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 523ms/step - accuracy: 0.8139 - loss: 0.5582"]},{"output_type":"stream","name":"stderr","text":["WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n"]},{"output_type":"stream","name":"stdout","text":["\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r\u001b[1m782/782\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m430s\u001b[0m 550ms/step - accuracy: 0.8139 - loss: 0.5582 - val_accuracy: 0.8552 - val_loss: 0.4451\n","Epoch 17/30\n","\u001b[1m782/782\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 524ms/step - accuracy: 0.8143 - loss: 0.5612"]},{"output_type":"stream","name":"stderr","text":["WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n"]},{"output_type":"stream","name":"stdout","text":["\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r\u001b[1m782/782\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m431s\u001b[0m 551ms/step - accuracy: 0.8143 - loss: 0.5612 - val_accuracy: 0.8596 - val_loss: 0.4436\n","Epoch 18/30\n","\u001b[1m782/782\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m442s\u001b[0m 551ms/step - accuracy: 0.8155 - loss: 0.5596 - val_accuracy: 0.8514 - val_loss: 0.4568\n","Epoch 19/30\n","\u001b[1m782/782\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m431s\u001b[0m 551ms/step - accuracy: 0.8119 - loss: 0.5581 - val_accuracy: 0.8576 - val_loss: 0.4454\n","Epoch 20/30\n","\u001b[1m782/782\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m427s\u001b[0m 546ms/step - accuracy: 0.8094 - loss: 0.5649 - val_accuracy: 0.8414 - val_loss: 0.5078\n","Epoch 21/30\n","\u001b[1m782/782\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m443s\u001b[0m 548ms/step - accuracy: 0.8130 - loss: 0.5644 - val_accuracy: 0.8409 - val_loss: 0.4908\n","Epoch 22/30\n","\u001b[1m782/782\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m441s\u001b[0m 547ms/step - accuracy: 0.8158 - loss: 0.5459 - val_accuracy: 0.8405 - val_loss: 0.5078\n","Epoch 23/30\n","\u001b[1m782/782\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m429s\u001b[0m 549ms/step - accuracy: 0.8121 - loss: 0.5549 - val_accuracy: 0.8421 - val_loss: 0.4896\n","Epoch 24/30\n","\u001b[1m782/782\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m430s\u001b[0m 550ms/step - accuracy: 0.8199 - loss: 0.5401 - val_accuracy: 0.8475 - val_loss: 0.4879\n","Epoch 25/30\n","\u001b[1m782/782\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m431s\u001b[0m 551ms/step - accuracy: 0.8180 - loss: 0.5478 - val_accuracy: 0.8233 - val_loss: 0.5859\n","Epoch 26/30\n","\u001b[1m782/782\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m433s\u001b[0m 554ms/step - accuracy: 0.8175 - loss: 0.5527 - val_accuracy: 0.8453 - val_loss: 0.4754\n","Epoch 27/30\n","\u001b[1m782/782\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m439s\u001b[0m 550ms/step - accuracy: 0.8208 - loss: 0.5410 - val_accuracy: 0.8494 - val_loss: 0.4910\n","Epoch 28/30\n","\u001b[1m782/782\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m428s\u001b[0m 547ms/step - accuracy: 0.8149 - loss: 0.5551 - val_accuracy: 0.8506 - val_loss: 0.4943\n","Epoch 29/30\n","\u001b[1m782/782\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m426s\u001b[0m 544ms/step - accuracy: 0.8167 - loss: 0.5423 - val_accuracy: 0.8412 - val_loss: 0.5185\n","Epoch 30/30\n","\u001b[1m782/782\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m426s\u001b[0m 544ms/step - accuracy: 0.8208 - loss: 0.5457 - val_accuracy: 0.8375 - val_loss: 0.5385\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.src.callbacks.history.History at 0x7e9f31eaadd0>"]},"metadata":{},"execution_count":3}],"source":["# Import Libraries\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout, BatchNormalization\n","from tensorflow.keras.datasets import cifar10\n","from tensorflow.keras.utils import to_categorical\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","from tensorflow.keras.callbacks import ModelCheckpoint\n","from tensorflow.keras.models import load_model\n","\n","# Mount Drive\n","from google.colab import drive\n","drive.mount('/content/drive')\n","\n","\n","# Load & preprocess dataset\n","(x_train, y_train), (x_test, y_test) = cifar10.load_data()\n","x_train, x_test = x_train / 255.0, x_test / 255.0\n","y_train, y_test = to_categorical(y_train), to_categorical(y_test)\n","\n","# Load saved model\n","model = load_model('/content/drive/MyDrive/best_cifar10_model.h5')\n","\n","# Recompile (optional, but recommended if optimizer state wasn’t saved)\n","from tensorflow.keras.optimizers import SGD\n","opt = SGD(learning_rate=0.01, momentum=0.9, nesterov=True)\n","model.compile(optimizer=opt, loss='categorical_crossentropy', metrics=['accuracy'])\n","\n","# Augmentation\n","datagen = ImageDataGenerator(\n","    rotation_range=15,\n","    width_shift_range=0.1,\n","    height_shift_range=0.1,\n","    horizontal_flip=True\n",")\n","datagen.fit(x_train)\n","\n","# Callbacks\n","checkpoint = ModelCheckpoint('/content/drive/MyDrive/v2_best_cifar10_model.h5', monitor='val_accuracy', save_best_only=True, mode='max')\n","\n","# Continue training\n","model.fit(\n","    datagen.flow(x_train, y_train, batch_size=64),\n","    epochs=30,  # continue from previous point\n","    validation_data=(x_test, y_test),\n","    callbacks=[checkpoint]\n",")\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"q5GbNoLrF-8U"},"outputs":[],"source":[]}],"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPS2uFQBIxzgHxRms0vY35j"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}